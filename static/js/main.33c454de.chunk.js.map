{"version":3,"sources":["components/Github.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","bigAvatar","width","height","Github","props","state","user","repos","axios","get","then","res","data","setState","catch","error","console","log","className","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","Typography","Card","CardHeader","title","Avatar","alt","src","this","avatar_url","href","html_url","login","CardContent","map","repo","name","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4YAaMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,UAAW,CACPC,MAAO,IACPC,OAAQ,SAsEDC,E,YAjEX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CACTC,KAAM,GACNC,MAAQ,IALE,E,iFAUE,IAAD,OACfC,IAAMC,IAAN,wCACCC,MAAK,SAAAC,GACF,IAAML,EAAOK,EAAIC,KACjB,EAAKC,SAAS,CAAEP,YAEnBQ,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAE5BP,IAAMC,IAAN,8CACCC,MAAK,SAAAC,GACF,IAAMJ,EAAQI,EAAIC,KAElB,EAAKC,SAAS,CAAEN,aAEnBO,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAK5B,OACI,6BACI,yBAAKG,UAAW1B,EAAUG,MACtB,kBAACwB,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACjB,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQN,UAAW1B,EAAUK,WAAY4B,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYL,QAAQ,KAAKG,MAAM,WAC/B,6CAKR,6BACI,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,0BAClB,8BACA,kBAACC,EAAA,EAAD,CAAQC,IAAI,UAAUC,IAAKC,KAAK7B,MAAMC,KAAK6B,WAAYjB,UAAW1B,EAAUQ,YAD5E,IAC0F,4BAAI,uBAAGoC,KAAMF,KAAK7B,MAAMC,KAAK+B,UAAWH,KAAK7B,MAAMC,KAAKgC,SAGlJ,kBAACC,EAAA,EAAD,KACI,4BACML,KAAK7B,MAAME,MAAMiC,KAAI,SAAAC,GAAI,OAAI,4BAAKA,EAAKC,KAAV,iB,GArD1CC,IAAMC,WCdZC,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCKc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,kB","file":"static/js/main.33c454de.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    bigAvatar: {\r\n        width: 160,\r\n        height: 160,\r\n    },\r\n  }));\r\n\r\nclass Github extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: {},\r\n            repos:  [],\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get(`https://api.github.com/users/hoangqc`)\r\n        .then(res => {\r\n            const user = res.data;            \r\n            this.setState({ user });\r\n            })\r\n        .catch(error => console.log(error));\r\n\r\n        axios.get(`https://api.github.com/users/hoangqc/repos`)\r\n        .then(res => {\r\n            const repos = res.data;\r\n            //console.log(repos)\r\n            this.setState({ repos });\r\n            })\r\n        .catch(error => console.log(error));\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div className={useStyles.root}>\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar variant=\"dense\">\r\n                        <IconButton edge=\"start\" className={useStyles.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\">\r\n                        <span> Github</span>\r\n                        </Typography>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                </div>\r\n                <div>\r\n                    <Card>\r\n                        <CardHeader title=\"Welcome to the Github\"  />\r\n                        <span>\r\n                        <Avatar alt=\"HoangQC\" src={this.state.user.avatar_url} className={useStyles.bigAvatar} /> <h2><a href={this.state.user.html_url}>{this.state.user.login}</a></h2>\r\n                        </span>\r\n                        \r\n                        <CardContent>\r\n                            <ul>\r\n                                { this.state.repos.map(repo => <li>{repo.name} </li>)} \r\n                            </ul>\r\n                        </CardContent>\r\n                    </Card>                              \r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Github;","import React from 'react';\r\nimport './App.css';\r\nimport Github from './components/Github'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Github />     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}